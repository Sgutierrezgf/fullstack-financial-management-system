generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum para los roles de usuario
enum Rol {
  ADMIN
  USER
}

enum MovementType {
  INCOME
  EGRESS
}

model IncomeEgresss {
  id      Int          @id @default(autoincrement())
  concept String
  amount  Float
  data    DateTime
  type    MovementType
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  phone    String @unique
  password String
  rol      Rol
  // accounts       Account[]
  // sessions       Session[]
  // Authenticators Authenticator[]
}

// model Account {
//   userId            Int
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@id([provider, providerAccountId])
// }

// model Session {
//   sessionToken String   @unique
//   userId       Int
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model VerificationToken {
//   identifier String
//   token      String
//   expires    DateTime

//   @@id([identifier, token])
// }

// model Authenticator {
//   credentialID         String  @unique
//   userId               Int
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@id([userId, credentialID])
// }
